// Global ignore
WHITESPACE = _{ " " | "\t" | NEWLINE }
COMMENT    = _{ "//" ~ (!NEWLINE ~ ANY)* ~ ( NEWLINE | EOI ) }

// Char
not_digit  = _{ !ASCII_DIGIT }
multispace = _{ WHITESPACE* }
char       = {
    !("\"" | "\\") ~ ANY
    | "\\" ~ ("\"" | "\\" | "/" | "b" | "f" | "n" | "r" | "t")
    | "\\" ~ ("u" ~ ASCII_HEX_DIGIT{4})
}

dot         = _{ "." }
comma       = _{ "," }
quote       = _{ "\"" }
dollar      = _{ "$" }
backquote   = _{ "`" }
left_paren  = _{ "(" }
right_paren = _{ ")" }
left_brace  = _{ "{" }
right_brace = _{ "}" }
semicolon  = _{ ";" }
underscore = { "_" }

// Misc
ident_list = { ident ~ ( comma  ~ ident )* }
expr_list  = { expr ~ ( comma  ~ expr )* }

// Literals
string = ${ quote ~ ( char )* ~ quote }
float  = ${ ASCII_DIGIT+ ~ dot ~ ASCII_DIGIT+ }
number = ${ neg? ~ ASCII_DIGIT+ ~ not_digit  }
bool   = { "true" | "false" }

literal = {
  string
  | float
  | number
  | bool
}

// Operator
add    = { "+" }
sub    = { "-" }
mul    = { "*" }
div    = { "/" }
rem    = { "%" }
and    = { "&&" }
or     = { "||" }
eq     = { "==" }
neq    = { "!=" }
lt     = { "<" }
gt     = { ">" }
ge     = { ">=" }
le     = { "<=" }
bin_op = { add | sub | mul | div | rem | and | or | eq | neq | lt | gt | ge | le }

not   = { "!" }
neg   = { "-" }
un_op = { neg | not }

op = { bin_op | un_op }

// Expr
block        = { left_brace ~ ( item )* ~ right_brace }
unit         = ${ left_paren ~ right_paren }
ident        = ${ ( underscore | ASCII_ALPHA ) ~ ( underscore | ASCII_ALPHA | ASCII_DIGIT )* }
exec_start   = _{ dollar ~ backquote }
exec         = ${ exec_start ~ ( !backquote ~ ANY )* ~ backquote }
fn_call      = { ident ~ left_paren ~ expr_list? ~ right_paren }
un_op_expr    = { un_op ~ expr }
trivial_expr = {
   literal
    | un_op_expr
    | fn_call
    | exec
    | block
    | unit
    | ident
}
bin_op_expr = { trivial_expr ~ bin_op ~ expr }
range      = { ( trivial_expr | bin_op_expr ) ~ ".."  ~  ( trivial_expr | bin_op_expr ) }
expr       = { bin_op_expr | range | trivial_expr }

// Stmt
stmt = { "let" ~  ident ~  "=" ~ expr ~ semicolon }

// Item
assign     = { ident ~ "=" ~ expr ~ semicolon }
fn_def     = { "fn" ~ multispace ~ ident ~ left_paren ~ ( ident_list )? ~ right_paren ~ block }
if_loop    = { "if" ~ multispace ~ expr ~ block ~ ( "else" ~ block )? }
for_loop   = { "for" ~multispace ~ ident ~ multispace ~ "in" ~ multispace ~ expr ~ block }
while_loop = { "while" ~ multispace ~ expr ~ block }
use_item   = { "use" ~ multispace ~ident ~ semicolon }

item = {
  fn_def
  | stmt
  | assign
  | if_loop
  | for_loop
  | while_loop
  | (expr ~ semicolon)
  | COMMENT
}

main = {
  SOI ~ item * ~ EOI
}